import streamlit as st
import pandas as pd
import os
from PIL import Image
import matplotlib.pyplot as plt
import seaborn as sns
import sys

# A√±adir el directorio utils al path para importar tus m√≥dulos
sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))

# Intentar importar tus m√≥dulos personalizados
try:
    from recomendador import recomendar_peliculas
    from visualizaciones import generar_visualizaciones
except ImportError as e:
    st.warning(f"No se pudieron cargar los m√≥dulos personalizados: {e}")

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de Recomendaci√≥n de Pel√≠culas",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Funci√≥n para cargar datos con manejo de errores mejorado
@st.cache_data
def load_data():
    data = {}
    data_dir = "data"
    archivos_csv = [
        "actores_directores.csv",
        "actores_directores_peliculas.csv",
        "comentarios_peliculas.csv",
        "mapa_peliculas.csv",
        "peliculas_completas.csv",
        "peliculas_premios.csv",
        "recaudacion_peliculas.csv",
        "top_10_mas_vistas.csv",
        "top_10_mejor_puntuadas.csv",
        "vistas_por_pais.csv",
        "vistas_por_pais_con_coords.csv"
    ]
    
    for archivo in archivos_csv:
        try:
            filepath = os.path.join(data_dir, archivo)
            # Verificar si el archivo existe antes de intentar cargarlo
            if os.path.exists(filepath):
                data[archivo.split('.')[0]] = pd.read_csv(filepath)
                st.success(f"‚úÖ {archivo} cargado correctamente")
            else:
                st.warning(f"‚ö†Ô∏è Archivo no encontrado: {filepath}")
        except Exception as e:
            st.error(f"‚ùå Error al cargar {archivo}: {str(e)}")
    
    return data

# Cargar datos al iniciar la aplicaci√≥n
with st.spinner('Cargando datos...'):
    data = load_data()

# T√≠tulo principal
st.title("üé• Sistema de Recomendaci√≥n de Pel√≠culas")

# Sidebar con navegaci√≥n
st.sidebar.title("Navegaci√≥n")
menu_opciones = ["üè† Inicio", "üìä Visualizaciones", "üéØ Recomendador", "‚ÑπÔ∏è Acerca de"]
seleccion = st.sidebar.radio("Ir a", menu_opciones)

# P√°gina de Inicio
if seleccion == "üè† Inicio":
    st.header("Bienvenido al Sistema de Recomendaci√≥n de Pel√≠culas")
    st.write("""
    Explora nuestro cat√°logo de pel√≠culas, descubre visualizaciones interesantes 
    y obt√©n recomendaciones personalizadas basadas en tus preferencias.
    """)
    
    # Mostrar estad√≠sticas b√°sicas
    if 'top_10_mas_vistas' in data:
        st.subheader("Top 3 Pel√≠culas M√°s Vistas")
        top3 = data['top_10_mas_vistas'].head(3)
        cols = st.columns(3)
        for idx, (_, row) in enumerate(top3.iterrows()):
            with cols[idx]:
                # Intentar mostrar imagen del actor/director
                try:
                    img_dir = "imagenes/imagenes_directores_actores"
                    actor_img = f"{row['actor_principal'].replace(' ', '_')}.jpg"
                    img_path = os.path.join(img_dir, actor_img)
                    if os.path.exists(img_path):
                        st.image(Image.open(img_path), width=150)
                    st.write(f"**{row['pelicula']}** ({row['vistas']} vistas)")
                except:
                    st.write(f"**{row['pelicula']}** ({row['vistas']} vistas)")

# P√°gina de Visualizaciones
elif seleccion == "üìä Visualizaciones":
    st.header("Visualizaciones de Datos")
    
    # Selector de tipo de visualizaci√≥n
    viz_type = st.selectbox("Selecciona el tipo de visualizaci√≥n", [
        "Top 10 Pel√≠culas M√°s Vistas",
        "Recaudaci√≥n por Pel√≠cula",
        "Distribuci√≥n de Vistas por Pa√≠s",
        "Premios vs. Calificaci√≥n"
    ])
    
    if viz_type == "Top 10 Pel√≠culas M√°s Vistas" and 'top_10_mas_vistas' in data:
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(x='vistas', y='pelicula', data=data['top_10_mas_vistas'], palette='viridis', ax=ax)
        ax.set_title('Top 10 Pel√≠culas M√°s Vistas')
        ax.set_xlabel('N√∫mero de Vistas')
        ax.set_ylabel('Pel√≠cula')
        st.pyplot(fig)
    
    elif viz_type == "Recaudaci√≥n por Pel√≠cula" and 'recaudacion_peliculas' in data:
        fig, ax = plt.subplots(figsize=(10, 6))
        top10 = data['recaudacion_peliculas'].nlargest(10, 'recaudacion')
        sns.barplot(x='recaudacion', y='pelicula', data=top10, palette='magma', ax=ax)
        ax.set_title('Top 10 Pel√≠culas por Recaudaci√≥n')
        ax.set_xlabel('Recaudaci√≥n (en millones)')
        ax.set_ylabel('Pel√≠cula')
        st.pyplot(fig)

# P√°gina de Recomendador
elif seleccion == "üéØ Recomendador":
    st.header("Sistema de Recomendaci√≥n")
    
    with st.form("preferencias_form"):
        st.subheader("Configura tus preferencias")
        
        col1, col2 = st.columns(2)
        
        with col1:
            genero = st.selectbox("G√©nero favorito", [
                "Todos", "Acci√≥n", "Aventura", "Comedia", "Drama", 
                "Ciencia Ficci√≥n", "Terror", "Romance", "Animaci√≥n"
            ])
            a√±o_min, a√±o_max = st.slider(
                "Rango de a√±os",
                1950, 2023, (2000, 2023)
        
        with col2:
            rating_min = st.slider("Rating m√≠nimo", 1.0, 10.0, 7.0, step=0.5)
            duracion = st.selectbox("Duraci√≥n preferida", [
                "Cualquiera", "Corta (<90 min)", "Media (90-120 min)", "Larga (>120 min)"
            ])
        
        submitted = st.form_submit_button("Generar Recomendaciones")
    
    if submitted:
        try:
            # Usar tu m√≥dulo de recomendaci√≥n si est√° disponible
            if 'recomendar_peliculas' in globals():
                recomendaciones = recomendar_peliculas(
                    data, genero, (a√±o_min, a√±o_max), rating_min, duracion)
            else:
                # Implementaci√≥n de respaldo
                if 'peliculas_completas' in data:
                    filtro = data['peliculas_completas'].copy()
                    if genero != "Todos":
                        filtro = filtro[filtro['genero'].str.contains(genero, case=False)]
                    filtro = filtro[(filtro['a√±o'] >= a√±o_min) & (filtro['a√±o'] <= a√±o_max)]
                    filtro = filtro[filtro['rating'] >= rating_min]
                    
                    if duracion == "Corta (<90 min)":
                        filtro = filtro[filtro['duracion'] < 90]
                    elif duracion == "Media (90-120 min)":
                        filtro = filtro[(filtro['duracion'] >= 90) & (filtro['duracion'] <= 120)]
                    elif duracion == "Larga (>120 min)":
                        filtro = filtro[filtro['duracion'] > 120]
                    
                    recomendaciones = filtro.sort_values('rating', ascending=False).head(5)
                else:
                    recomendaciones = None
            
            if recomendaciones is not None and not recomendaciones.empty:
                st.success("üéâ Recomendaciones generadas con √©xito!")
                
                cols = st.columns(3)
                for idx, (_, row) in enumerate(recomendaciones.iterrows()):
                    with cols[idx % 3]:
                        st.subheader(row['titulo'])
                        try:
                            img_dir = "imagenes/imagenes_directores_actores"
                            # Intentar mostrar imagen del director/actor principal
                            director_img = f"{row['director'].replace(' ', '_')}.jpg"
                            img_path = os.path.join(img_dir, director_img)
                            if os.path.exists(img_path):
                                st.image(Image.open(img_path), width=200)
                            else:
                                actor_img = f"{row['actor_principal'].replace(' ', '_')}.jpg"
                                img_path = os.path.join(img_dir, actor_img)
                                if os.path.exists(img_path):
                                    st.image(Image.open(img_path), width=200)
                        except:
                            pass
                        
                        st.write(f"**Director:** {row.get('director', 'N/A')}")
                        st.write(f"**A√±o:** {row.get('a√±o', 'N/A')}")
                        st.write(f"**Rating:** {row.get('rating', 'N/A')}/10")
                        st.write(f"**Duraci√≥n:** {row.get('duracion', 'N/A')} min")
            else:
                st.warning("No se encontraron pel√≠culas que coincidan con tus criterios.")
        
        except Exception as e:
            st.error(f"Error al generar recomendaciones: {str(e)}")

# P√°gina Acerca De
elif seleccion == "‚ÑπÔ∏è Acerca De":
    st.header("Acerca de Este Proyecto")
    st.write("""
    ### Sistema de Recomendaci√≥n de Pel√≠culas
    
    Este proyecto fue desarrollado para analizar datos cinematogr√°ficos y proporcionar
    recomendaciones personalizadas basadas en las preferencias del usuario.
    
    **Caracter√≠sticas principales:**
    - Visualizaci√≥n de datos de pel√≠culas
    - Sistema de recomendaci√≥n personalizado
    - An√°lisis de tendencias cinematogr√°ficas
    
    **Tecnolog√≠as utilizadas:**
    - Python üêç
    - Streamlit üéà
    - Pandas üêº
    - Matplotlib/Seaborn üìä
    
    **Datos incluidos:**
    - Informaci√≥n de m√°s de 500 pel√≠culas
    - Datos de actores y directores
    - Recaudaci√≥n y calificaciones
    """)

# Mostrar estructura de archivos en el sidebar
st.sidebar.markdown("---")
st.sidebar.subheader("Estructura del Proyecto")
st.sidebar.code("""
peliculas_proyecto/
‚îú‚îÄ‚îÄ app.py
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îú‚îÄ‚îÄ actores_directores.csv
‚îÇ   ‚îú‚îÄ‚îÄ actores_directores_peliculas.csv
‚îÇ   ‚îú‚îÄ‚îÄ comentarios_peliculas.csv
‚îÇ   ‚îú‚îÄ‚îÄ mapa_peliculas.csv
‚îÇ   ‚îú‚îÄ‚îÄ peliculas_completas.csv
‚îÇ   ‚îú‚îÄ‚îÄ peliculas_premios.csv
‚îÇ   ‚îú‚îÄ‚îÄ recaudacion_peliculas.csv
‚îÇ   ‚îú‚îÄ‚îÄ top_10_mas_vistas.csv
‚îÇ   ‚îú‚îÄ‚îÄ top_10_mejor_puntuadas.csv
‚îÇ   ‚îú‚îÄ‚îÄ vistas_por_pais.csv
‚îÇ   ‚îî‚îÄ‚îÄ vistas_por_pais_con_coords.csv
‚îú‚îÄ‚îÄ imagenes/
‚îÇ   ‚îî‚îÄ‚îÄ imagenes_directores_actores/
‚îÇ       ‚îú‚îÄ‚îÄ Antonio_Banderas.jpg
‚îÇ       ‚îú‚îÄ‚îÄ ... (m√°s im√°genes)
‚îî‚îÄ‚îÄ utils/
    ‚îú‚îÄ‚îÄ recomendador.py
    ‚îî‚îÄ‚îÄ visualizaciones.py
""")

# Footer
st.markdown("---")
st.markdown("¬© 2023 Sistema de Recomendaci√≥n de Pel√≠culas")
