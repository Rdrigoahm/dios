import streamlit as st
import pandas as pd
import os
from PIL import Image
import matplotlib.pyplot as plt
import seaborn as sns
import sys

# Configuraci√≥n inicial
st.set_page_config(
    page_title="Recomendador de Pel√≠culas",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Funci√≥n mejorada para verificar y cargar archivos
def load_data_with_verification():
    data = {}
    data_dir = "data"
    
    # Verificar si la carpeta data existe
    if not os.path.exists(data_dir):
        st.error(f"‚ùå La carpeta '{data_dir}' no existe en el directorio actual")
        st.error(f"Directorio actual: {os.getcwd()}")
        return data
    
    st.info(f"üìÅ Contenido de la carpeta '{data_dir}':")
    files_in_data = os.listdir(data_dir)
    st.write(files_in_data)
    
    # Mapeo de nombres de archivos (sin extensi√≥n) a posibles nombres reales
    expected_files = {
        'actores_directores': ['actores_directores.csv', 'actores_directores'],
        'actores_directores_peliculas': ['actores_directores_peliculas.csv', 'actores_directores_peliculas'],
        'comentarios_peliculas': ['comentarios_peliculas.csv', 'comentarios_peliculas.csv.csv'],
        'mapa_peliculas': ['mapa_peliculas.csv', 'mapa_peliculas_coup'],
        'peliculas_completas': ['peliculas_completas.csv', 'mapa_peliculas_comple'],
        'peliculas_premios': ['peliculas_premios.csv'],
        'recaudacion_peliculas': ['recaudacion_peliculas.csv'],
        'top_10_mas_vistas': ['top_10_mas_vistas.csv'],
        'top_10_mejor_puntuadas': ['top_10_mejor_puntuadas.csv'],
        'vistas_por_pais': ['vistas_por_pais.csv', 'vistas_por_pais'],
        'vistas_por_pais_con_coords': ['vistas_por_pais_con_coords.csv', 'vistas_por_pais_coup_on_coords']
    }
    
    for file_key, possible_names in expected_files.items():
        loaded = False
        for filename in possible_names:
            filepath = os.path.join(data_dir, filename)
            if os.path.exists(filepath):
                try:
                    # Intentar leer como CSV
                    data[file_key] = pd.read_csv(filepath)
                    st.success(f"‚úÖ {filename} cargado como '{file_key}'")
                    loaded = True
                    break
                except pd.errors.EmptyDataError:
                    st.warning(f"‚ö†Ô∏è {filename} est√° vac√≠o")
                    break
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Error al leer {filename}: {str(e)}")
                    break
        
        if not loaded:
            st.error(f"‚ùå No se encontr√≥ ning√∫n archivo v√°lido para: {file_key}")
            st.error(f"Archivos probados: {', '.join(possible_names)}")
    
    return data

# Cargar datos con verificaci√≥n
with st.spinner('Verificando y cargando archivos...'):
    data = load_data_with_verification()

# Mostrar estructura del proyecto en sidebar
st.sidebar.title("Estructura del Proyecto")
st.sidebar.code("""
peliculas_proyecto/
‚îú‚îÄ‚îÄ app.py
‚îú‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ data/ (debe contener los archivos CSV)
‚îú‚îÄ‚îÄ imagenes/
‚îÇ   ‚îî‚îÄ‚îÄ imagenes_directores_actores/
‚îî‚îÄ‚îÄ utils/
    ‚îú‚îÄ‚îÄ recomendador.py
    ‚îî‚îÄ‚îÄ visualizaciones.py
""")

# P√°ginas de la aplicaci√≥n
pages = {
    "üè† Inicio": lambda: show_home_page(data),
    "üìä Visualizaciones": lambda: show_visualizations(data),
    "üéØ Recomendador": lambda: show_recommender(data),
    "‚ÑπÔ∏è Acerca De": lambda: show_about()
}

page = st.sidebar.radio("Navegaci√≥n", list(pages.keys()))
pages[page]()

def show_home_page(data):
    st.title("üé• Sistema de Recomendaci√≥n de Pel√≠culas")
    st.write("""
    Bienvenido al sistema de recomendaci√≥n de pel√≠culas. 
    Explora nuestras visualizaciones y obt√©n recomendaciones personalizadas.
    """)
    
    # Mostrar estado de carga de datos
    st.subheader("Estado de los Datos")
    if data:
        st.success("Algunos archivos se cargaron correctamente")
        st.write("Claves disponibles en los datos:", list(data.keys()))
    else:
        st.error("No se pudo cargar ning√∫n archivo de datos")

def show_visualizations(data):
    st.title("üìä Visualizaciones de Datos")
    
    if not data:
        st.warning("No hay datos disponibles para visualizar")
        return
    
    # Selector de visualizaci√≥n
    viz_option = st.selectbox(
        "Selecciona una visualizaci√≥n",
        options=["Top Pel√≠culas", "Recaudaci√≥n", "Distribuci√≥n por Pa√≠s"]
    )
    
    if viz_option == "Top Pel√≠culas" and 'top_10_mas_vistas' in data:
        st.subheader("Top 10 Pel√≠culas M√°s Vistas")
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(
            x='vistas', 
            y='pelicula', 
            data=data['top_10_mas_vistas'],
            palette='coolwarm',
            ax=ax
        )
        ax.set_xlabel("N√∫mero de Vistas")
        ax.set_ylabel("Pel√≠cula")
        st.pyplot(fig)

def show_recommender(data):
    st.title("üéØ Sistema de Recomendaci√≥n")
    
    with st.form("preferences_form"):
        st.subheader("Configura tus preferencias")
        
        col1, col2 = st.columns(2)
        
        with col1:
            genre = st.selectbox(
                "G√©nero favorito",
                options=["Todos", "Acci√≥n", "Comedia", "Drama", "Ciencia Ficci√≥n"]
            )
            year_range = st.slider(
                "Rango de a√±os",
                1950, 2023, (2000, 2023)
            
        with col2:
            min_rating = st.slider(
                "Rating m√≠nimo",
                1.0, 10.0, 7.0, 0.5)
            duration = st.selectbox(
                "Duraci√≥n preferida",
                options=["Cualquiera", "Corta (<90 min)", "Media (90-120 min)", "Larga (>120 min)"]
            )
        
        submitted = st.form_submit_button("Generar Recomendaciones")
    
    if submitted:
        if not data:
            st.error("No hay datos disponibles para generar recomendaciones")
            return
        
        # L√≥gica de recomendaci√≥n simple (puedes reemplazar con tu m√≥dulo)
        st.success("Recomendaciones generadas (ejemplo):")
        st.write("1. Pel√≠cula Ejemplo 1 (8.5/10)")
        st.write("2. Pel√≠cula Ejemplo 2 (8.2/10)")
        st.write("3. Pel√≠cula Ejemplo 3 (8.0/10)")

def show_about():
    st.title("‚ÑπÔ∏è Acerca del Proyecto")
    st.write("""
    Sistema de recomendaci√≥n de pel√≠culas desarrollado con Streamlit.
    
    **Caracter√≠sticas:**
    - An√°lisis de datos cinematogr√°ficos
    - Visualizaciones interactivas
    - Sistema de recomendaci√≥n personalizado
    
    **Tecnolog√≠as:**
    - Python
    - Streamlit
    - Pandas
    - Matplotlib/Seaborn
    """)

if __name__ == "__main__":
    # Instrucciones adicionales
    st.sidebar.markdown("---")
    st.sidebar.info("""
    **Si los archivos no se cargan:**
    1. Verifica que est√©n en la carpeta 'data'
    2. Comprueba los nombres exactos
    3. Aseg√∫rate que sean archivos CSV v√°lidos
    """)
